// Adatbázis kapcsolat konfigurációja
datasource db {
  provider = "mongodb" // MongoDB-t használunk adatbázisként
  url      = env("MONGODB_URI") // Az adatbázis URL-je egy környezeti változóból jön
}

// Prisma kliens generálása (ha lekérdezéseket akarunk, ezen keresztül kell)
generator client {
  provider = "prisma-client-js" // JavaScript Prisma kliens generálása
  output   = "./prisma/generated/client" // Generált Prisma kliens elérési útvonala
}

// User (Felhasználó) modell
model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító (MongoDB ObjectId)
  username    String    @unique // Egyedi felhasználónév
  email       String    @unique // Egyedi email cím
  password    String? // Opcionális jelszó (ha van hitelesítés)
  fullName    String? // Opcionális teljes név
  createdAt   DateTime  @default(now()) // Fiók létrehozásának dátuma
  dateOfBirth DateTime? // Születési dátum (opcionális)
  business    Boolean // Megmondja, hogy az illető üzleti fiókot használ-e

  admins              Admin[] // Admin kapcsolat (ha az illető admin egy pubnál)
  accounts            Account[] // Kapcsolat az Account modellel (külső fiókok, pl. Google, Facebook)
  sessions            Session[] // Kapcsolat a Session modellel (belépési munkamenetek)
  passwordResetTokens PasswordResetToken[] // Kapcsolat jelszó visszaállítási tokenekkel
  reviews             Review[]             @relation("UserReviews") // Kapcsolat a Review modellel (felhasználó véleményei)
}

// Admin (Pub admin) modell
model Admin {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító
  userId String  @unique @db.ObjectId // Admin felhasználójának azonosítója
  pubId  String? @db.ObjectId // Az admin által kezelt pub azonosítója
  email  String  @unique // Admin e-mail címe

  pub  Pub? @relation(fields: [pubId], references: [id], onDelete: Cascade, name: "PubAdmins") // Kapcsolat a Pub modellel
  user User @relation(fields: [userId], references: [id]) // Kapcsolat a User modellel
}

// Jelszó-visszaállítási tokenek
model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító
  token     String   @unique // Egyedi visszaállítási token
  expiresAt DateTime // Token lejárati dátuma
  createdAt DateTime @default(now()) // Token létrehozási ideje
  userId    String   @db.ObjectId // Felhasználó azonosítója
  user      User     @relation(fields: [userId], references: [id]) // Kapcsolat a User modellel
}

// Külső fiókok (OAuth, például Google, Facebook)
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító
  userId            String   @db.ObjectId // Felhasználó azonosítója
  type              String // Fiók típusa (pl. "oauth")
  provider          String // Szolgáltató neve (pl. "google")
  providerAccountId String // Szolgáltatói fiók azonosítója
  refresh_token     String?  @db.String // Opcionális frissítési token
  access_token      String?  @db.String // Opcionális hozzáférési token
  expires_at        Int? // Token lejárati ideje
  token_type        String? // Token típusa (pl. "Bearer")
  scope             String? // Jogosultsági körök
  id_token          String?  @db.String // Opcionális ID token
  session_state     String? // Munkamenet állapota
  createdAt         DateTime @default(now()) // Fiók létrehozásának dátuma
  //updatedAt       DateTime @updatedAt // Utolsó frissítés időpontja

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Kapcsolat a User modellel

  @@unique([provider, providerAccountId]) // Szolgáltatónként egyedi fiók
}

// Belépési munkamenetek
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító
  sessionToken String   @unique // Egyedi munkamenet token
  userId       String   @db.ObjectId // Felhasználó azonosítója
  expires      DateTime // Lejárati idő

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Kapcsolat a User modellel
}

// Pub (Kocsma, bár, helyszín) modell
model Pub {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító
  name         String // Kocsma neve
  fullAddress  String // Cím
  longitude    Float // Hosszúsági koordináta
  latitude     Float // Szélességi koordináta
  phone        String // Telefonszám
  email        String // E-mail cím
  openingHours Json // Nyitvatartási idők JSON formátumban
  functioning  Boolean // Működik-e a hely -> később lehetne módosítani a statere
  href         String // Külső hivatkozás
  googleRating Float // Google értékelés (pl. 4.5)
  rating       Float // KocsMaten belüli értékelés (pl. 4.5)
  state        String //t_closed, closed, func
  description  String // Rövid leírás
  admins       Admin[]   @relation("PubAdmins") // Kapcsolat az adminokkal
  reviews      Review[]  @relation("PubReviews") // Kapcsolat a véleményekkel
  products     Product[] @relation("PubProducts") // Reláció a products modellel
  images       Image[]   @relation("PubImages") // Hozzáadva a kapcsolat az Image modellel
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String // A termék neve 
  type        String // 'food' vagy 'drink' típusú termékek
  price       Float // Termék ára
  description String // Rövid leírás

  pubId     String   @db.ObjectId
  pub       Pub      @relation(fields: [pubId], references: [id], onDelete: Cascade, name: "PubProducts")
  createdAt DateTime @default(now()) // Fiók létrehozásának dátuma
  //updatedAt         DateTime @updatedAt // Utolsó frissítés időpontja
}

// Review (Felhasználói vélemény) modell
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Egyedi azonosító
  rating    Int // 1-5 közötti értékelés
  comment   String // Vélemény szövege, remélhetőleg nincs korlátozva 24 karakterre
  isActive  Boolean  @default(true) //Moderált vélemény
  createdAt DateTime @default(now()) // Vélemény létrehozásának dátuma
  //updatedAt          DateTime @updatedAt // Utolsó frissítés időpontja
  pubId     String   @db.ObjectId // Kapcsolódó pub azonosítója
  pub       Pub      @relation(fields: [pubId], references: [id], onDelete: Cascade, name: "PubReviews") // Kapcsolat a Pub modellel

  userId String @db.ObjectId // Véleményt író felhasználó azonosítója
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserReviews") // Kapcsolat a User modellel
}

//Képek feltöltéséhez
model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  pubId        String   @db.ObjectId
  createdAt    DateTime @default(now())
  isBackground Boolean  @default(false)
  pub          Pub      @relation(fields: [pubId], references: [id], onDelete: Cascade, name: "PubImages")

  @@unique([pubId, url])
}
